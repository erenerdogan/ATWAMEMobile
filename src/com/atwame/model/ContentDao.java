package com.atwame.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.SqlUtils;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import com.atwame.model.Content;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONTENT.
*/
public class ContentDao extends AbstractDao<Content, Long> {

    public static final String TABLENAME = "CONTENT";

    /**
     * Properties of entity Content.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property User_id = new Property(3, Long.class, "user_id", false, "USER_ID");
        public final static Property Category_id = new Property(4, Long.class, "category_id", false, "CATEGORY_ID");
        public final static Property Attachment_id = new Property(5, Long.class, "attachment_id", false, "ATTACHMENT_ID");
        public final static Property Location_id = new Property(6, Long.class, "location_id", false, "LOCATION_ID");
        public final static Property Like = new Property(7, Boolean.class, "like", false, "LIKE");
        public final static Property Created_at = new Property(8, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Upload_at = new Property(9, java.util.Date.class, "upload_at", false, "UPLOAD_AT");
    };

    private DaoSession daoSession;

    private Query<Content> user_ContentsQuery;
    private Query<Content> category_CategoriesQuery;
    private Query<Content> attachment_AttachmentsQuery;
    private Query<Content> location_LocationsQuery;

    public ContentDao(DaoConfig config) {
        super(config);
    }
    
    public ContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONTENT' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'DESCRIPTION' TEXT," + // 2: description
                "'USER_ID' INTEGER," + // 3: user_id
                "'CATEGORY_ID' INTEGER," + // 4: category_id
                "'ATTACHMENT_ID' INTEGER," + // 5: attachment_id
                "'LOCATION_ID' INTEGER," + // 6: location_id
                "'LIKE' INTEGER," + // 7: like
                "'CREATED_AT' INTEGER," + // 8: created_at
                "'UPLOAD_AT' INTEGER);"); // 9: upload_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONTENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Content entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        Long user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(4, user_id);
        }
 
        Long category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindLong(5, category_id);
        }
 
        Long attachment_id = entity.getAttachment_id();
        if (attachment_id != null) {
            stmt.bindLong(6, attachment_id);
        }
 
        Long location_id = entity.getLocation_id();
        if (location_id != null) {
            stmt.bindLong(7, location_id);
        }
 
        Boolean like = entity.getLike();
        if (like != null) {
            stmt.bindLong(8, like ? 1l: 0l);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(9, created_at.getTime());
        }
 
        java.util.Date upload_at = entity.getUpload_at();
        if (upload_at != null) {
            stmt.bindLong(10, upload_at.getTime());
        }
    }

    @Override
    protected void attachEntity(Content entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Content readEntity(Cursor cursor, int offset) {
        Content entity = new Content( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // category_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // attachment_id
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // location_id
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // like
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // created_at
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // upload_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Content entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCategory_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setAttachment_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLocation_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLike(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setCreated_at(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpload_at(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Content entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Content entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "contents" to-many relationship of User. */
    public synchronized List<Content> _queryUser_Contents(Long user_id) {
        if (user_ContentsQuery == null) {
            QueryBuilder<Content> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.User_id.eq(user_id));
            user_ContentsQuery = queryBuilder.build();
        } else {
            user_ContentsQuery.setParameter(0, user_id);
        }
        return user_ContentsQuery.list();
    }

    /** Internal query to resolve the "categories" to-many relationship of Category. */
    public synchronized List<Content> _queryCategory_Categories(Long category_id) {
        if (category_CategoriesQuery == null) {
            QueryBuilder<Content> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Category_id.eq(category_id));
            category_CategoriesQuery = queryBuilder.build();
        } else {
            category_CategoriesQuery.setParameter(0, category_id);
        }
        return category_CategoriesQuery.list();
    }

    /** Internal query to resolve the "attachments" to-many relationship of Attachment. */
    public synchronized List<Content> _queryAttachment_Attachments(Long attachment_id) {
        if (attachment_AttachmentsQuery == null) {
            QueryBuilder<Content> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Attachment_id.eq(attachment_id));
            attachment_AttachmentsQuery = queryBuilder.build();
        } else {
            attachment_AttachmentsQuery.setParameter(0, attachment_id);
        }
        return attachment_AttachmentsQuery.list();
    }

    /** Internal query to resolve the "locations" to-many relationship of Location. */
    public synchronized List<Content> _queryLocation_Locations(Long location_id) {
        if (location_LocationsQuery == null) {
            QueryBuilder<Content> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Location_id.eq(location_id));
            location_LocationsQuery = queryBuilder.build();
        } else {
            location_LocationsQuery.setParameter(0, location_id);
        }
        return location_LocationsQuery.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLocationDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getAttachmentDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getCategoryDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM CONTENT T");
            builder.append(" LEFT JOIN LOCATION T0 ON T.'LOCATION_ID'=T0.'ID'");
            builder.append(" LEFT JOIN ATTACHMENT T1 ON T.'ATTACHMENT_ID'=T1.'ID'");
            builder.append(" LEFT JOIN CATEGORY T2 ON T.'CATEGORY_ID'=T2.'ID'");
            builder.append(" LEFT JOIN USER T3 ON T.'USER_ID'=T3.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Content loadCurrentDeep(Cursor cursor, boolean lock) {
        Content entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Location location = loadCurrentOther(daoSession.getLocationDao(), cursor, offset);
        entity.setLocation(location);
        offset += daoSession.getLocationDao().getAllColumns().length;

        Attachment attachment = loadCurrentOther(daoSession.getAttachmentDao(), cursor, offset);
        entity.setAttachment(attachment);
        offset += daoSession.getAttachmentDao().getAllColumns().length;

        Category category = loadCurrentOther(daoSession.getCategoryDao(), cursor, offset);
        entity.setCategory(category);
        offset += daoSession.getCategoryDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Content loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Content> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Content> list = new ArrayList<Content>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Content> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Content> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
